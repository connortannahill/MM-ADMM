digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	1 [color="#fa2001", fontcolor="#ffffff", fontsize="10.00", label="MeshIntegrator<2>::step(int, double)\n96.88%\n(3.32%)"];
	1 -> 2 [arrowsize="0.81", color="#84cc07", fontcolor="#84cc07", fontsize="10.00", label="65.86%\n95×", labeldistance="2.63", penwidth="2.63"];
	1 -> 5 [arrowsize="0.52", color="#0c968c", fontcolor="#0c968c", fontsize="10.00", label="26.72%\n95×", labeldistance="1.07", penwidth="1.07"];
	1 -> 19 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n95×", labeldistance="0.50", penwidth="0.50"];
	2 [color="#84cc07", fontcolor="#ffffff", fontsize="10.00", label="Mesh<2>::prox(double, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&)\n65.86%\n(5.10%)\n95×"];
	2 -> 3 [arrowsize="0.78", color="#56c408", fontcolor="#56c408", fontsize="10.00", label="60.38%\n9728000×", labeldistance="2.42", penwidth="2.42"];
	2 -> 15 [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n29184000×", labeldistance="0.50", penwidth="0.50"];
	3 [color="#56c408", fontcolor="#ffffff", fontsize="10.00", label="Mesh<2>::bfgsOptSimplex(int, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, int, double, bool)\n60.38%\n(4.51%)\n9728000×"];
	3 -> 4 [arrowsize="0.67", color="#0aaf2b", fontcolor="#0aaf2b", fontsize="10.00", label="45.07%\n20070400×", labeldistance="1.80", penwidth="1.80"];
	3 -> 8 [arrowsize="0.35", color="#0d3b80", fontcolor="#0d3b80", fontsize="10.00", label="10.15%\n9728000×", labeldistance="0.50", penwidth="0.50"];
	4 [color="#0aaf2b", fontcolor="#ffffff", fontsize="10.00", label="AdaptationFunctional<2>::blockGrad(int, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, MeshInterpolator<2>&, bool)\n45.07%\n(13.12%)\n20070400×"];
	4 -> 6 [arrowsize="0.50", color="#0c9493", fontcolor="#0c9493", fontsize="10.00", label="25.13%\n80281600×", labeldistance="1.01", penwidth="1.01"];
	4 -> 12 [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.14%\n20070400×", labeldistance="0.50", penwidth="0.50"];
	4 -> 13 [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.84%\n20070400×", labeldistance="0.50", penwidth="0.50"];
	4 -> 16 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.19%\n280985600×", labeldistance="0.50", penwidth="0.50"];
	4 -> 20 [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.65%\n40140800×", labeldistance="0.50", penwidth="0.50"];
	4 -> 23 [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n20070400×", labeldistance="0.50", penwidth="0.50"];
	5 [color="#0c968c", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const>, 0> const> const>, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const>, 0> const> const> const&, Eigen::internal::assign_op<double, double> const&)\n26.72%\n(1.31%)\n95×"];
	5 -> 7 [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.50%\n95×", labeldistance="0.50", penwidth="0.50"];
	5 -> 9 [arrowsize="0.35", color="#0d337e", fontcolor="#0d337e", fontsize="10.00", label="8.40%\n95×", labeldistance="0.50", penwidth="0.50"];
	5 -> 11 [arrowsize="0.35", color="#0d297b", fontcolor="#0d297b", fontsize="10.00", label="6.51%\n95×", labeldistance="0.50", penwidth="0.50"];
	6 [color="#0c9493", fontcolor="#ffffff", fontsize="10.00", label="MeshInterpolator<2>::evalMonitorOnGrid(Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n25.13%\n(17.21%)\n80281600×"];
	6 -> 10 [arrowsize="0.35", color="#0d307d", fontcolor="#0d307d", fontsize="10.00", label="7.92%\n321126400×", labeldistance="0.50", penwidth="0.50"];
	7 [color="#0d3f81", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::conservative_sparse_sparse_product_impl<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int> >(Eigen::SparseMatrix<double, 0, int> const&, Eigen::SparseMatrix<double, 0, int> const&, Eigen::SparseMatrix<double, 0, int>&, bool)\n10.83%\n(10.68%)\n98×"];
	8 [color="#0d3b80", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, 6, 6, 0, 6, 6>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, 0> const> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, Eigen::Product<Eigen::Matrix<double, 6, 6, 0, 6, 6>, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, 0>, 0> const, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const> const> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, Eigen::Matrix<double, 6, 6, 0, 6, 6>, 0>, 0> const, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const> const>, Eigen::internal::add_assign_op<double, double> >(Eigen::Matrix<double, 6, 6, 0, 6, 6>&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, 0> const> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, Eigen::Product<Eigen::Matrix<double, 6, 6, 0, 6, 6>, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, 0>, 0> const, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const> const> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, Eigen::Product<Eigen::Matrix<double, 6, 1, 0, 6, 1>, Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, 6, 1, 0, 6, 1> >, Eigen::Matrix<double, 6, 6, 0, 6, 6>, 0>, 0> const, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 6, 6, 0, 6, 6> const> const> const> const&, Eigen::internal::add_assign_op<double, double> const&)\n10.15%\n(10.15%)\n9728000×"];
	9 [color="#0d347e", fontcolor="#ffffff", fontsize="10.00", label="Eigen::SparseMatrix<double, 0, int>& Eigen::SparseMatrix<double, 0, int>::operator=<Eigen::SparseMatrix<double, 1, int> >(Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> > const&)\n8.66%\n(8.66%)\n98×"];
	10 [color="#0d307d", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<3>::dGdM(Eigen::Matrix<double, 3, 3, 0, 3, 3>&, double, Eigen::Matrix<double, 3, 3, 0, 3, 3>&, Eigen::Matrix<double, 3, 1, 0, 3, 1>&, Eigen::Matrix<double, 3, 3, 0, 3, 3>&)\n7.93%\n(6.47%)\n321726080×"];
	10 -> 15 [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.46%\n321126400×", labeldistance="0.50", penwidth="0.50"];
	11 [color="#0d2a7b", fontcolor="#ffffff", fontsize="10.00", label="Eigen::SparseMatrix<double, 1, int>& Eigen::SparseMatrix<double, 1, int>::operator=<Eigen::SparseMatrix<double, 0, int> >(Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> > const&)\n6.65%\n(6.65%)\n97×"];
	12 [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGdM(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n2.14%\n(2.14%)\n20070400×"];
	13 [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGdJ(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n1.84%\n(1.84%)\n20070400×"];
	14 [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="Mesh<2>::Mesh(Eigen::Matrix<double, -1, -1, 0, -1, -1>&, Eigen::Matrix<int, -1, -1, 0, -1, -1>&, std::vector<Mesh<2>::NodeType, std::allocator<Mesh<2>::NodeType> >&, MonitorFunction<2>*, double, double)\n1.77%\n(0.06%)"];
	14 -> 18 [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.83%\n1×", labeldistance="0.50", penwidth="0.50"];
	15 [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, 1, -1, false>, 0>::MapBase(double*, long, long)\n1.66%\n(1.66%)\n364481969×"];
	16 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, 6, 1, 0, 6, 1>, -1, 1, false>, 0>::MapBase(double*, long, long)\n1.19%\n(1.19%)\n280985600×"];
	17 [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="MeshIntegrator<2>::MeshIntegrator(double, Mesh<2>&)\n0.94%\n(0.00%)"];
	17 -> 21 [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.59%\n1×", labeldistance="0.50", penwidth="0.50"];
	18 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="MeshInterpolator<2>::smoothMonitorGrid(int)\n0.83%\n(0.77%)\n1×"];
	19 [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::SimplicialCholesky<Eigen::SparseMatrix<double, 0, int>, 1, Eigen::AMDOrdering<int> >::_solve_impl<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::Matrix<double, -1, 1, 0, -1, 1> >(Eigen::MatrixBase<Eigen::Matrix<double, -1, 1, 0, -1, 1> > const&, Eigen::MatrixBase<Eigen::Matrix<double, -1, 1, 0, -1, 1> >&) const\n0.74%\n(0.59%)\n95×"];
	20 [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1, 0, -1, 1> const, -1, 1, false>, 0>::MapBase(double const*, long, long)\n0.65%\n(0.65%)\n40140800×"];
	21 [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="Eigen::SparseMatrix<double, 0, int>& Eigen::SparseMatrix<double, 0, int>::operator=<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::SparseMatrix<double, 0, int> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1, 0, -1, -1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::SparseMatrix<double, 0, int>, 2> const> const> >(Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::SparseMatrix<double, 0, int> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1, 0, -1, -1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::SparseMatrix<double, 0, int>, 2> const> const> > const&)\n0.59%\n(0.00%)\n1×"];
	21 -> 22 [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.59%\n1×", labeldistance="0.50", penwidth="0.50"];
	22 [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::assign_sparse_to_sparse<Eigen::SparseMatrix<double, 0, int>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::SparseMatrix<double, 0, int> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1, 0, -1, -1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::SparseMatrix<double, 0, int>, 2> const> const> >(Eigen::SparseMatrix<double, 0, int>&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::SparseMatrix<double, 0, int> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1, 0, -1, -1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::SparseMatrix<double, 0, int>, 2> const> const> const&)\n0.59%\n(0.00%)\n1×"];
	22 -> 7 [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n1×", labeldistance="0.50", penwidth="0.50"];
	23 [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGddet(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&)\n0.53%\n(0.53%)\n20070400×"];
}
