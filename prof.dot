digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	1 [color="#ff0200", fontcolor="#ffffff", fontsize="10.00", label="MeshIntegrator<2>::step(int, double)\n99.83%\n(0.00%)"];
	1 -> 2 [arrowsize="0.94", color="#ed7003", fontcolor="#ed7003", fontsize="10.00", label="88.37%\n200×", labeldistance="3.53", penwidth="3.53"];
	1 -> 6 [arrowsize="0.35", color="#0d4282", fontcolor="#0d4282", fontsize="10.00", label="11.46%\n200×", labeldistance="0.50", penwidth="0.50"];
	2 [color="#ed7003", fontcolor="#ffffff", fontsize="10.00", label="Mesh<2>::prox(double, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::Matrix<double, -1, 1, 0, -1, 1>&)\n88.37%\n(2.33%)\n200×"];
	2 -> 3 [arrowsize="0.93", color="#ea8403", fontcolor="#ea8403", fontsize="10.00", label="86.05%\n320000×", labeldistance="3.44", penwidth="3.44"];
	3 [color="#ea8403", fontcolor="#ffffff", fontsize="10.00", label="Mesh<2>::newtonOptSimplex(int, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, int, double)\n86.05%\n(1.16%)\n320000×"];
	3 -> 4 [arrowsize="0.86", color="#d4d906", fontcolor="#d4d906", fontsize="10.00", label="74.42%\n2240000×", labeldistance="2.98", penwidth="2.98"];
	3 -> 7 [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.47%\n320000×", labeldistance="0.50", penwidth="0.50"];
	4 [color="#d4d906", fontcolor="#ffffff", fontsize="10.00", label="AdaptationFunctional<2>::blockGrad(int, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, Eigen::Matrix<double, 6, 1, 0, 6, 1>&, MeshInterpolator<2>&)\n74.42%\n(29.07%)\n2240000×"];
	4 -> 5 [arrowsize="0.59", color="#0ba166", fontcolor="#0ba166", fontsize="10.00", label="34.88%\n8960000×", labeldistance="1.40", penwidth="1.40"];
	4 -> 11 [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.49%\n2240000×", labeldistance="0.50", penwidth="0.50"];
	4 -> 12 [arrowsize="0.35", color="#0d1c77", fontcolor="#0d1c77", fontsize="10.00", label="3.49%\n2240000×", labeldistance="0.50", penwidth="0.50"];
	4 -> 13 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.16%\n31360000×", labeldistance="0.50", penwidth="0.50"];
	4 -> 14 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.16%\n2240000×", labeldistance="0.50", penwidth="0.50"];
	4 -> 15 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.16%\n2240000×", labeldistance="0.50", penwidth="0.50"];
	5 [color="#0ba166", fontcolor="#ffffff", fontsize="10.00", label="MeshInterpolator<2>::evalMonitorOnGrid(Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n34.88%\n(30.23%)\n8960000×"];
	5 -> 10 [arrowsize="0.35", color="#0d2179", fontcolor="#0d2179", fontsize="10.00", label="4.65%\n35840000×", labeldistance="0.50", penwidth="0.50"];
	6 [color="#0d4282", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double, -1, 1, 0, -1, 1>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const>, 0> const> const>, Eigen::internal::assign_op<double, double> >(Eigen::Matrix<double, -1, 1, 0, -1, 1>&, Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::Matrix<double, -1, 1, 0, -1, 1>, 0> const, Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const> const, Eigen::Product<Eigen::Product<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, 2>, Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, Eigen::Matrix<double, -1, 1, 0, -1, 1> const, Eigen::Matrix<double, -1, 1, 0, -1, 1> const>, 0> const> const> const&, Eigen::internal::assign_op<double, double> const&)\n11.46%\n(0.00%)\n200×"];
	6 -> 9 [arrowsize="0.35", color="#0d367f", fontcolor="#0d367f", fontsize="10.00", label="9.16%\n200×", labeldistance="0.50", penwidth="0.50"];
	6 -> 16 [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.15%\n200×", labeldistance="0.50", penwidth="0.50"];
	6 -> 17 [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.15%\n200×", labeldistance="0.50", penwidth="0.50"];
	7 [color="#0d3d80", fontcolor="#ffffff", fontsize="10.00", label="Eigen::PartialPivLU<Eigen::Matrix<double, 6, 6, 0, 6, 6> >::compute()\n10.47%\n(0.00%)\n320000×"];
	7 -> 8 [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.47%\n320000×", labeldistance="0.50", penwidth="0.50"];
	8 [color="#0d3d80", fontcolor="#ffffff", fontsize="10.00", label="Eigen::internal::partial_lu_impl<double, 0, int, 6>::unblocked_lu(Eigen::Ref<Eigen::Matrix<double, 6, 6, 0, 6, 6>, 0, Eigen::OuterStride<-1> >&, int*, int&)\n10.47%\n(10.47%)\n320000×"];
	9 [color="#0d377f", fontcolor="#ffffff", fontsize="10.00", label="void Eigen::internal::conservative_sparse_sparse_product_impl<Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int>, Eigen::SparseMatrix<double, 0, int> >(Eigen::SparseMatrix<double, 0, int> const&, Eigen::SparseMatrix<double, 0, int> const&, Eigen::SparseMatrix<double, 0, int>&, bool)\n9.30%\n(9.30%)\n203×"];
	10 [color="#0d2179", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<3>::dGdM(Eigen::Matrix<double, 3, 3, 0, 3, 3>&, double, Eigen::Matrix<double, 3, 3, 0, 3, 3>&, Eigen::Matrix<double, 3, 1, 0, 3, 1>&, Eigen::Matrix<double, 3, 3, 0, 3, 3>&)\n4.65%\n(4.65%)\n35849777×"];
	11 [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGdM(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n3.49%\n(3.49%)\n2240000×"];
	12 [color="#0d1c77", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGddet(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&)\n3.49%\n(3.49%)\n2240000×"];
	13 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, 6, 1, 0, 6, 1>, -1, 1, false>, 0>::MapBase(double*, long, long)\n1.16%\n(1.16%)\n31360000×"];
	14 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGdJ(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 2, 0, 2, 2>&)\n1.16%\n(1.16%)\n2240000×"];
	15 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="HuangFunctional<2>::dGdX(Eigen::Matrix<double, 2, 2, 0, 2, 2>&, double, Eigen::Matrix<double, 2, 2, 0, 2, 2>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&, Eigen::Matrix<double, 2, 1, 0, 2, 1>&)\n1.16%\n(1.16%)\n2240000×"];
	16 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="Eigen::SparseMatrix<double, 0, int>& Eigen::SparseMatrix<double, 0, int>::operator=<Eigen::SparseMatrix<double, 1, int> >(Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 1, int> > const&)\n1.16%\n(1.16%)\n203×"];
	17 [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="Eigen::SparseMatrix<double, 1, int>& Eigen::SparseMatrix<double, 1, int>::operator=<Eigen::SparseMatrix<double, 0, int> >(Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> > const&)\n1.16%\n(1.16%)\n202×"];
}
